[% WRAPPER wrapper.html.tt %]
    <div class="row" style="margin: 30px 0px 10px 0px">
        <div class="col-lg-3 col-md-3">
            <div 
                data-placement="auto"
                data-toggle="tooltip"
                title="[% h.get_recorder_vehicle(replay).vehicle.label |html %] on [% h.map_name(replay) |html%]" 
                style="background: transparent url([% config.urls.assets %]/mapscreen/[% h.map_icon(replay) %]) no-repeat scroll 0 0;"
                class="rounded-tl bs-tooltip"
                >
                <div style="width: 231px; height: 97px; background: transparent url([% config.urls.assets %]/mapscreen/overlay.png) no-repeat scroll 0 0">
                    <img src="[% config.urls.assets %]/vehicles/100/[% h.get_recorder_vehicle(replay).vehicle.icon %]" style="width: 160px; height: 100px; position: relative; top: 0px; left: 110px"/>
                </div>
            </div>
        </div>
        <div class="col-lg-9 col-md-9">
            <p class="lead" style="margin-bottom: 5px">
                    <a data-placement="auto" data-toggle="tooltip" class="bs-tooltip [% IF h.get_replay_stats(replay, 'isPremium') %]premium" style="background-position: center left;"[% END %] href="/player/[% replay.game.server %]/[% replay.game.recorder.name |uri %]/" title="[% replay.game.recorder.name |html %] [% IF h.get_replay_stats(replay, 'isPremium') %](Premium)[% END %]">[% replay.game.recorder.name |truncate(15) |html %]</a> - <a href="/vehicle/[% h.vehicle_link(h.get_recorder_vehicle(replay).vehicle.ident) %]/" data-placement="auto" data-toggle="tooltip" class="bs-tooltip" title="[% h.get_recorder_vehicle(replay).vehicle.label |html %]">[% h.get_recorder_vehicle(replay).vehicle.label_short |html %]</a> - <a href="/map/[% h.map_slug(replay) |uri %]/">[% h.map_name(replay) |html %]</a> ([% h.bonus_type_name(replay.game.bonus_type) %] [% h.game_type_name(replay.game.type) %])</a>
            </p>
            <h4 style="padding: 0px; margin: 0px 0px 5px 0px">
                    <span style="font-weight: normal">Result:</span><span>[% INCLUDE replay/view/matchresult.html.tt %]</span> <span style="margin: 0px 0px 0px 10px; font-weight: normal">Survived:</span><span> [% INCLUDE replay/view/vehicle_stats/survived.html.tt %]</span>
            </h4>
            <div class="btn-group btn-group-justified">
                <a class="bs-tooltip btn btn-default btn-like-replay" href="[% h.get_id(replay) %]" data-toggle="tooltip" data-container="body" data-placement="bottom" title="Like this replay"><span class="badge">[% replay.site.like || '0' %]</span> Like</a>
                <a class="bs-tooltip btn btn-default btn-save-replay" data-placement="bottom" data-toggle="tooltip" data-container="body" title="Download this replay" href="[% config.urls.replays %]/[% replay.file %]"><span class="badge">[% replay.site.downloads || '0' %]</span> Save</a>
                <a class="bs-tooltip btn btn-default btn-replay-page" data-placement="bottom" data-toggle="tooltip" data-container="body"  title="Replay Page" href="/replay/[% h.get_id(replay) %].html">Replay Page</a>
            </div>
        </div>
    </div>
    <div class="row" style="margin: 10px 0px 0px 0px">
        <div class="col-lg-12 col-md-12">
            <div id="battle-heatmap"></div>
        </div>
    </div>
    <script type="text/javascript">
        $(document).ready(function() {
            // we can't use the heatmapViewer class here since it makes assumptions about the data
            // and it's source, so we just fiddle it together manually
            var mapGrid = new MapGrid({ 
                ident       : '[% h.map_ident(replay) %]',
                container   : '#battle-heatmap',
                map         : {
                    width: 768,
                    height: 768,
                    bounds: [% h.as_json(h.map_boundingbox(replay)) %],
                }
            });
            // find out what game type we're running
            var gameType = '[% replay.game.type %]';
            var positions = [% h.as_json(h.map_positions(replay)) %];
            mapGrid.render();

            if(gameType == 'ctf') {
                console.log('base: ', positions.base);
                for(i = 0; i < positions.base.length; i++) {
                    positions.base[i].forEach(function(basedata) {
                        var isEnemy = ((i + 1) == [% replay.game.recorder.team %]) ? false : true;
                        var base = new BasePoint();
                        if(isEnemy) {
                            base.setEnemy();
                        } else {
                            base.setFriendly();
                        }
                        base.setPosition(mapGrid.game_to_map_coord(basedata));
                        mapGrid.addItem('base-' + i, base.render().el);
                    });
                }
                for(i = 0; i < positions.team.length; i++) {
                    if(positions.team[i] != null) {
                        for(j = 0; j < positions.team[i].length; j++) {
                            var spawn = new SpawnPoint();
                            spawn.setPoint(j + 1);
                            if((i + 1) == [% replay.game.recorder.team %]) {
                                spawn.setFriendly();
                            } else {
                                spawn.setEnemy();
                            }
                            spawn.setPosition(mapGrid.game_to_map_coord(positions.team[i][j]));
                            mapGrid.addItem('spawn-' + i + '-' + j, spawn.render().el);
                        }
                    }
                }
            } else if(gameType == 'assault') {
                var control = new BasePoint();
                if(positions.base[0] == null) {
                    control.setPosition(mapGrid.game_to_map_coord(positions.base[1][0]));
                    if(2 == [% replay.game.recorder.team %]) {
                        control.setFriendly();
                    } else {
                        control.setEnemy();
                    }
                } else {
                    control.setPosition(mapGrid.game_to_map_coord(positions.base[0][0]));
                    if(1 == [% replay.game.recorder.team %]) {
                        control.setFriendly();
                    } else {
                        control.setEnemy();
                    }
                }

                mapGrid.addItem('base-control', control.render().el);

                // now iterate over the spawn points for both teams
                for(i = 0; i < positions.team.length; i++) {
                    if(positions.team[i] != null) {
                        for(j = 0; j < positions.team[i].length; j++) {
                            var spawn = new SpawnPoint();
                            spawn.setPoint(j + 1);
                            if((i + 1) == [% replay.game.recorder.team %]) {
                                spawn.setFriendly();
                            } else {
                                spawn.setEnemy();
                            }
                            spawn.setPosition(mapGrid.game_to_map_coord(positions.team[i][j]));
                            mapGrid.addItem('spawn-' + i + '-' + j, spawn.render().el);
                        }
                    }
                }
            } else if(gameType == 'domination') {
                // set the control point
                var control = new BasePoint();
                control.setNeutral();
                control.setPosition(mapGrid.game_to_map_coord(positions.control[0]));
                mapGrid.addItem('base-control', control.render().el);

                // add the team spawns
                for(i = 0; i < positions.team.length; i++) {
                    for(j = 0; j < positions.team[i].length; j++) {
                        var isEnemy = ([% replay.game.recorder.team %] == (i + 1)) ? false : true;
                        var spawn = new SpawnPoint();
                        spawn.setPoint(j + 1);
                        if(isEnemy) {
                            spawn.setEnemy();
                        } else {
                            spawn.setFriendly();
                        }
                        spawn.setPosition(mapGrid.game_to_map_coord(positions.team[i][j]));
                        mapGrid.addItem('spawn-' + i + '-' + j, spawn.render().el);
                    }
                }
            }

            var heatmapConfig = {
                "radius"    : 48,
                "visible"   : true,
                "opacity"   : 40,
                "element"   : document.getElementById($(mapGrid.getOverlay('viewer')).attr('id')),
                "gradient"  : {
                    0.30        : 'rgb(0,0,255)',
                    0.50        : 'rgb(0,255,255)',
                    0.60        : 'rgb(0,255,0)',
                    0.80        : 'rgb(255,255,0)',
                    0.90        : 'rgb(255,0,0)',
                    1.00        : 'rgb(255,255,255)',
                }
            };
            heatmap = heatmapFactory.create(heatmapConfig);
            heatmap.store.setDataSet([% h.as_json(dataset) %]);
        });
    </script>
[% END %]
